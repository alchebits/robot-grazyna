// Pro_Graph2.pde
/*
 Used in the Youtube video "Arduino and Processing ( Graph Example )"
 Based in the Tom Igoe example.
 Mofified by Arduining 17 Mar 2012:
  -A wider line was used. strokeWeight(4);
  -Continuous line instead of vertical lines.
  -Bigger Window size 600x400.
-------------------------------------------------------------------------------
This program takes ASCII-encoded strings
from the serial port at 9600 baud and graphs them. It expects values in the
range 0 to 1023, followed by a newline, or newline and carriage return

Created 20 Apr 2005
Updated 18 Jan 2008
by Tom Igoe
This example code is in the public domain.
*/

import processing.serial.*;

Serial myPort;        // The serial port
int xPos = 1;         // horizontal position of the graph

//Variables to draw a continuous line.
int lastxPos=1;
int lastheight=0;
int lastxPos2=1;
int lastheight2=0;

void setup () {
  // set the window size:
  size(600, 400);

  // List all the available serial ports
  println(Serial.list());
  // Check the listed serial ports in your machine
  // and use the correct index number in Serial.list()[].

  myPort = new Serial(this, Serial.list()[0], 9600);  //

  // A serialEvent() is generated when a newline character is received :
  myPort.bufferUntil('\n');
  background(0);      // set inital background:
}
void draw () {
  // get the ASCII string:
  String inString = myPort.readStringUntil('\n');
  if (inString != null) {
    inString = trim(inString);                // trim off whitespaces.

    String[] list = split(inString, " ");

    float inByte = float(list[0]);           // convert to a number.
    float inByte2 = float(list[1]);
    println(inString);
    println(inByte2);
    println(inByte);
    inByte = map(inByte, -10, 10, 0, height); //map to the screen height.
    inByte2 = map(inByte2, -10, 10, 0, height);
    //Drawing a line from Last inByte to the new one.
    stroke(0,255,0);     //stroke color
    strokeWeight(2);        //stroke wider
    line(lastxPos, lastheight, xPos, height - inByte);
    lastheight= int(height-inByte);

    stroke(255,0,0);     //stroke color
    strokeWeight(2);        //stroke wider
    line(lastxPos2, lastheight2, xPos, height - inByte2);
    lastheight2= int(height-inByte2);
    lastxPos2 = xPos;
    lastxPos= xPos;

    // at the edge of the window, go back to the beginning:
    if (xPos >= width) {
      xPos = 0;
      lastxPos= 0;
      lastxPos2 = 0;
      background(0);  //Clear the screen.
    }
    else {
      // increment the horizontal position:
      xPos++;
    }
  }
}
